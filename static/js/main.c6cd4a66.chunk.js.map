{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","api.ts","index.tsx"],"names":["MovieCard","movie","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","FindMovie","query","setQuery","getMovieData","isError","addNewMovie","isLoading","clickedButton","htmlFor","type","id","placeholder","value","onChange","event","target","disabled","length","classNames","onClick","preventDefault","App","useState","movieData","setMovieData","error","setError","setMovie","moviesList","setMoviesList","isLiading","setIsloading","setCklickedButton","useMemo","Title","Plot","Poster","imdbID","fetch","then","res","json","catch","Response","Error","getMovie","data","finally","result","some","mov","findSameMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6cd4a66.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movieCard\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            data-cy=\"moviePoster\"\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\" data-cy=\"movieTitle\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\" data-cy=\"movieDescription\">\n          {description}\n          <br />\n          <a href={imdbUrl} data-cy=\"movieURL\">\n            IMDB\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import './FindMovie.scss';\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  query: string,\n  setQuery: (event: string) => void,\n  getMovieData: (title: string) => void,\n  isError: boolean,\n  movie: Movie | null,\n  addNewMovie: () => void,\n  isLoading: boolean,\n  clickedButton: boolean,\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  query,\n  setQuery,\n  getMovieData,\n  isError,\n  movie,\n  addNewMovie,\n  isLoading,\n  clickedButton,\n}) => {\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              disabled={query.length === 0}\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={\n                classNames(('button is-light'), { 'is-loading': isLoading })\n              }\n              onClick={(event) => {\n                event.preventDefault();\n                getMovieData(query);\n              }}\n            >\n              {clickedButton ? 'Find a movie' : 'Search again' }\n            </button>\n          </div>\n\n          {movie !== null && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => addNewMovie()}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie !== null && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState, useMemo } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { getMovie } from './api';\nimport { MovieData } from './types/MovieData';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movieData, setMovieData] = useState<MovieData | null>(null);\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [moviesList, setMoviesList] = useState<Movie[]>([]);\n  const [isLiading, setIsloading] = useState(false);\n  const [clickedButton, setCklickedButton] = useState(true);\n\n  useMemo(() => setError(false), [query]);\n\n  useMemo(() => {\n    if (movieData !== null) {\n      setMovie({\n        title: movieData.Title,\n        description: movieData.Plot,\n        imgUrl: movieData.Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : movieData.Poster,\n        imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n        imdbId: movieData.imdbID,\n      });\n    }\n  }, [movieData]);\n\n  const getMovieData = (title: string) => {\n    setIsloading(true);\n    setCklickedButton(false);\n\n    getMovie(title).then(data => {\n      if ('Error' in data) {\n        throw new Error('Error');\n      }\n\n      setMovieData(data);\n    }).catch(() => setError(true))\n      .finally(() => setIsloading(false));\n  };\n\n  const addNewMovie = () => {\n    const findSameMovie = () => {\n      let result;\n\n      if (movie !== null) {\n        result = moviesList.some((mov: Movie) => mov.imdbId === movie.imdbId);\n      }\n\n      return result;\n    };\n\n    if (!findSameMovie() && movie !== null) {\n      setMoviesList([...moviesList, movie]);\n    }\n\n    setMovie(null);\n    setQuery('');\n    setCklickedButton(true);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={query}\n          setQuery={setQuery}\n          getMovieData={(title: string) => getMovieData(title)}\n          isError={error}\n          movie={movie}\n          addNewMovie={() => addNewMovie()}\n          isLoading={isLiading}\n          clickedButton={clickedButton}\n        />\n      </div>\n    </div>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=6b592e8f';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}